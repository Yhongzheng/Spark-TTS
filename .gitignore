# 字节编译/优化/DLL 文件
__pycache__/
*.py[cod]
*$py.class
pretrained_models/
results/
demo/
# C 扩展
*.so
.gradio/
# 分发 / 打包
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
webui_test.py

# PyInstaller
#  通常这些文件由 Python 脚本根据模板生成，
#  以便在 PyInstaller 构建可执行文件前注入日期/其他信息。
*.manifest
*.spec

# 安装器日志
pip-log.txt
pip-delete-this-directory.txt

# 单元测试 / 覆盖率报告
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# 翻译文件
*.mo
*.pot

# Django 相关：
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask 相关：
instance/
.webassets-cache

# Scrapy 相关：
.scrapy

# Sphinx 文档
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   对于库或包，你可能希望忽略这些文件，因为代码
#   旨在在多个环境中运行；否则就把它们提交到版本库：
# .python-version

# pipenv
#   根据 pypa/pipenv#598，建议将 Pipfile.lock 纳入版本控制。
#   但在协作场景下，如果存在平台相关依赖或
#   缺乏跨平台支持的依赖，pipenv 可能会安装无法工作的依赖，或
#   无法安装所有所需依赖。
#Pipfile.lock

# UV
#   类似于 Pipfile.lock，一般建议将 uv.lock 纳入版本控制。
#   对于二进制包尤为推荐，以确保可复现性；而在类库项目中更常选择忽略。
#uv.lock

# poetry
#   类似于 Pipfile.lock，一般建议将 poetry.lock 纳入版本控制。
#   对于二进制包尤为推荐，以确保可复现性；而在类库项目中更常选择忽略。
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   类似于 Pipfile.lock，一般建议将 pdm.lock 纳入版本控制。
#pdm.lock
#   pdm 将项目范围的配置存放在 .pdm.toml 中，但建议不要将其
#   纳入版本控制。
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582；例如 github.com/David-OConnor/pyflow 和 github.com/pdm-project/pdm 使用
__pypackages__/

# Celery 相关
celerybeat-schedule
celerybeat.pid

# SageMath 解析后的文件
*.sage.py

# 虚拟环境 / 环境
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder 项目设置
.spyderproject
.spyproject

# Rope 项目设置
.ropeproject

# mkdocs 文档
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre 类型检查器
.pyre/

# pytype 静态类型分析器
.pytype/

# Cython 调试符号
cython_debug/

# PyCharm
#  JetBrains 的专用模板维护在单独的 JetBrains.gitignore 中，
#  可在 https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore 找到，
#  可以添加到全局 gitignore 或并入本文件。若要更激进（不推荐），
#  可以取消注释下一行以忽略整个 .idea 文件夹。
#.idea/

# PyPI 配置文件
.pypirc

# 测试输出文件
/outputs